// Generated by CoffeeScript 1.12.2
(function() {
  var CHARACTERS, CHARMAP, HOST, INVALID_CHARACTERS, InvalidSequenceError, PaymoFrame, char, encode, fromCharCode, getHostFromScript, i, j, len, ref1, unpack,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  getHostFromScript = function () {
    var currentScript, parser, protocol, slashes;
    currentScript = document.querySelector('script[src$="/paymentgate/iframe/checkout.js"]');
    parser = document.createElement('a');
    parser.href = currentScript.src;
    protocol = parser.protocol;
    slashes = protocol.concat('//');
    return slashes.concat(parser.hostname);
  };

  HOST = getHostFromScript();

  fromCharCode = String.fromCharCode;

  CHARACTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  INVALID_CHARACTERS = /[^a-z\d\+\=\/]/ig;

  CHARMAP = {};

  ref1 = CHARACTERS.split('');
  for (i = j = 0, len = ref1.length; j < len; i = ++j) {
    char = ref1[i];
    CHARMAP[char] = i;
  }

  InvalidSequenceError = (function(superClass) {
    extend(InvalidSequenceError, superClass);

    InvalidSequenceError.prototype.name = 'InvalidSequence';

    function InvalidSequenceError(char) {
      if (char) {
        this.message = "\"" + char + "\" is an invalid Base64 character";
      } else {
        this.message = 'Invalid bytes sequence';
      }
    }

    return InvalidSequenceError;

  })(Error);

  encode = this.btoa != null ? this.btoa : this.btoa = function(input) {
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4, invalidChar, k, len1, output, ref2;
    output = '';
    i = 0;
    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      if (invalidChar = Math.max(chr1, chr2, chr3) > 0xFF) {
        throw new InvalidSequenceError(invalidChar);
      }
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      ref2 = [enc1, enc2, enc3, enc4];
      for (k = 0, len1 = ref2.length; k < len1; k++) {
        char = ref2[k];
        output += CHARACTERS.charAt(char);
      }
    }
    return output;
  };

  unpack = function(utfstring) {
    var c, k, ref2, string;
    utfstring = utfstring.replace(/\r\n/g, '\n');
    string = '';
    for (i = k = 0, ref2 = utfstring.length - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; i = 0 <= ref2 ? ++k : --k) {
      c = utfstring.charCodeAt(i);
      if (c < 128) {
        string += fromCharCode(c);
      } else if (c > 127 && c < 2048) {
        string += fromCharCode((c >> 6) | 192);
        string += fromCharCode((c & 63) | 128);
      } else {
        string += fromCharCode((c >> 12) | 224);
        string += fromCharCode(((c >> 6) & 63) | 128);
        string += fromCharCode((c & 63) | 128);
      }
    }
    return string;
  };

  this.Base64 = {
    encode: function(str) {
      return encode(unpack(str));
    }
  };

  this.Util = (function() {
    function Util() {}

    Util.find = function(name) {
      var el, k, len1, ref, reg, results;
      if (typeof document.getElementById === "function" && indexOf.call(name[0], "#") >= 0) {
        return document.getElementById(name.slice(1, name.length));
      }
      if (typeof document.getElementsByClassName === "function") {
        return document.getElementsByClassName(name);
      } else if (typeof document.querySelectorAll === "function") {
        return document.querySelectorAll("." + name);
      } else {
        reg = new RegExp("(^|\\s)" + name + "(\\s|$)");
        ref = document.getElementsByTagName("*");
        results = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          el = ref[k];
          if (reg.test(el.className)) {
            results.push(el);
          }
        }
        return results;
      }
    };

    Util.addAttr = function(element, attr, value) {
      return element.setAttribute(attr, value);
    };

    Util.hasAttr = function(element, attr) {
      var node;
      if (typeof element.hasAttribute === "function") {
        return element.hasAttribute(attr);
      } else {
        node = element.getAttributeNode(attr);
        return !(node && (node.specified || node.nodeValue));
      }
    };

    Util.addClass = function(element, name) {
      return element.className += " " + name;
    };

    Util.hasClass = function(element, name) {
      return indexOf.call(element.className.split(" "), name) >= 0;
    };

    Util.css = function(element, css) {
      return element.style.cssText += ";" + css;
    };

    Util.insertBefore = function(element, child) {
      return element.parentNode.insertBefore(child, element);
    };

    Util.insertAfter = function(element, child) {
      return element.parentNode.insertBefore(child, element.nextSibling);
    };

    Util.insertText = function(element, text) {
      var text_element;
      text_element = document.createTextNode(text);
      return element.appendChild(text_element);
    };

    Util.append = function(element, child) {
      return element.appendChild(child);
    };

    Util.remove = function(element) {
      var _ref;
      if ((_ref = element.parentNode) != null) {
        return _ref.removeChild(element);
      } else {
        return void 0;
      }
    };

    Util.parents = function(node) {
      var ancestors, results1;
      ancestors = [];
      results1 = [];
      while ((node = node.parentNode) && node !== document && __indexOf_.call(ancestors, node) < 0) {
        results1.push(ancestors.push(node));
      }
      return results1;
    };

    Util.resolve = function(url) {
      var parser;
      parser = document.createElement("a");
      parser.href = url;
      return "" + parser.href;
    };

    Util.text = function(element, value) {
      if ("innerText" in element) {
        element.innerText = value;
      } else {
        element.textContent = value;
      }
      return value;
    };

    Util.params = function(pr) {
      var d, key, value, vb;
      d = [];
      vb = /%20/g;
      for (key in pr) {
        value = pr[key];
        if (typeof value === "function") {
          value = value();
          if (value === null) {
            value = "";
          }
        } else if (typeof value === "object") {
          value = JSON.stringify(value);
        }
        d.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
      }
      return d.join("&").replace(vb, "+");
    };


    Util.ismobile = function() {
//      if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
      if( /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
        return true;
      } else
        return false;
    };


    return Util;

  })();

  PaymoFrame = (function() {
    function PaymoFrame() {}

    PaymoFrame.model = {
      rebill_amount: "",
      rebill_end: "",
      rebill_period: ""
    };

    PaymoFrame.validator = function(params, key, type, required) {
      var value;
      value = params[key];
      if (required) {
        if (!value) {
          alert(key + " обязательный параметр");
          return;
        }
        if (type && !typeof value === type) {
          alert(key + " должен быть типа " + type);
          return;
        }
      }
      if (value) {
        if (type && !typeof value === type) {
          alert(key + " должен быть типа " + type);
          return;
        }
      }
      PaymoFrame.model[key] = value;
      return value;
    };

    PaymoFrame.get_params = function() {
      var amount, encode_extra, json_extra_data, queryset_params, template, version;
      amount = parseInt(PaymoFrame.model.amount) / 100;
      encode_extra = "{}";
      if (PaymoFrame.model.extra && typeof PaymoFrame.model.extra === "object") {
        json_extra_data = JSON.stringify(PaymoFrame.model.extra);
        encode_extra = Base64.encode(json_extra_data);
      }
      version = "1.0.0";
      template = "widget";
      if (PaymoFrame.model.version === "2.0.0") {
        version = PaymoFrame.model.version;
        if (PaymoFrame.model.template === void 0) {
          template = "widget_new";
        }
      }
      if (PaymoFrame.model.template !== void 0) {
        template = PaymoFrame.model.template;
      }
      queryset_params = {
        hash_sum: PaymoFrame.model.signature,
        api_key: PaymoFrame.model.api_key,
        transaction: PaymoFrame.model.tx_id || '',
        amount: amount,
        description: PaymoFrame.model.description,
        merchandise: PaymoFrame.model.description,
        return_url: "",
        custom_data: encode_extra,
        rebill_amount: PaymoFrame.model.rebill_amount,
        rebill_end: PaymoFrame.model.rebill_end,
        rebill_period: PaymoFrame.model.rebill_period,
        email: PaymoFrame.model.email,
        phone: PaymoFrame.model.phone,
        fail_redirect: PaymoFrame.model.fail_redirect,
        success_redirect: PaymoFrame.model.success_redirect,
        send_post_message: PaymoFrame.model.send_post_message || '',
        authorize_card: PaymoFrame.model.authorize_card || '',
        template: template,
        version: version
      };
      if (PaymoFrame.model.auto_return) {
        queryset_params["auto_return"] = PaymoFrame.model.auto_return;
      }
      if (PaymoFrame.model.pt_enabled && PaymoFrame.model.pt_enabled.length) {
        queryset_params["pt_enabled"] = PaymoFrame.model.pt_enabled;
      }
      if (PaymoFrame.model.pt_disabled && PaymoFrame.model.pt_disabled.length) {
        queryset_params["pt_disabled"] = PaymoFrame.model.pt_disabled;
      }
      return Util.params(queryset_params);
    };

    PaymoFrame.done = function(response) {
      var frame_height, frame_width, iframe, parent, query_string, style, iframe_block_style, paymo_iframe_block;
      response = typeof response === 'string' ? JSON.parse(response) : response; // For IE

      if( Util.ismobile() ) {
          frame_width = 100 + '%';
          frame_height = 100 + '%';
      } else {
          frame_width = response.width + 'px';
          frame_height = (response.height + 'px') || (800 + 'px');
      }
      query_string = PaymoFrame.get_params();
      iframe_block_style = "width: " + frame_width + "; height: " + frame_height + "; border-radius: 1rem; overflow: hidden; box-shadow: 0 1.188rem 2.375rem rgba(0,0,0,.3),0 .938rem .75rem rgba(0,0,0,.22); margin-bottom: 1rem;";
      paymo_iframe_block = document.createElement("div");
      Util.addAttr(paymo_iframe_block, "id", "paymo_iframe_block");
      Util.css(paymo_iframe_block, iframe_block_style);
      parent = Util.find("#" + PaymoFrame.model.parent_id);
      parent.innerHTML = "";
      Util.append(parent, paymo_iframe_block);
      style = "border: none;";
      iframe = document.createElement("iframe");
      Util.addAttr(iframe, "id", "paymo_frame");
      Util.addAttr(iframe, "frameborder", 0);
      Util.addAttr(iframe, "scrolling", "yes");
      Util.addAttr(iframe, "src", HOST + "/paymentgate/iframe?" + query_string);
      Util.addAttr(iframe, "width", frame_width);
      Util.addAttr(iframe, "height", frame_height);
      Util.css(iframe, style);
      return Util.append(paymo_iframe_block, iframe);
    };

    PaymoFrame.set = function(params) {
      var api_key, extra, rebill, setGood, pt_enabled, pt_disabled;
      pt_enabled = params.pt_enabled;
      pt_disabled = params.pt_disabled;

      if (Array.isArray(pt_enabled) && pt_enabled.length) {
        PaymoFrame.model["pt_enabled"] = pt_enabled;
      }

      if (Array.isArray(pt_disabled) && pt_disabled.length) {
        PaymoFrame.model["pt_disabled"] = pt_disabled;
      }

      rebill = params.rebill;
      extra = params.extra;
      PaymoFrame.validator(params, "parent_id", "str", true);
      PaymoFrame.validator(params, "api_key", "str", true);
      PaymoFrame.validator(params, "tx_id", "str", false);
      PaymoFrame.validator(params, "description", "str", true);
      PaymoFrame.validator(params, "amount", "number", true);
      PaymoFrame.validator(params, "signature", "str", false);
      PaymoFrame.validator(params, "success_redirect", "str", true);
      PaymoFrame.validator(params, "fail_redirect", "str", true);
      PaymoFrame.validator(params, "phone", "str", false);
      PaymoFrame.validator(params, "email", "str", false);
      PaymoFrame.validator(params, "send_post_message", "boolean", false);
      PaymoFrame.validator(params, "authorize_card", "boolean", false);
      PaymoFrame.validator(params, "template", "str", false);
      PaymoFrame.validator(params, "version", "str", false);
      if (typeof rebill === "object") {
        if (rebill["amount"]) {
          PaymoFrame.model["rebill_amount"] = rebill["amount"];
        }
        if (rebill["period"]) {
          PaymoFrame.model["rebill_period"] = rebill["period"];
        }
        if (rebill["end"]) {
          PaymoFrame.model["rebill_end"] = rebill["end"];
        }
      }
      if (params.auto_return) {
        PaymoFrame.model["auto_return"] = params.auto_return;
      }
      PaymoFrame.model["extra"] = extra;
      api_key = PaymoFrame.model.api_key;
      setGood = function() {
        var xmlHttp;
        xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", HOST + "/paymentgate/iframe/settings/" + api_key, true);
        xmlHttp.responseType = 'json';
        xmlHttp.onload = (function() {
          if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
            PaymoFrame.done(xmlHttp.response);
            return false;
          }
          return alert("Paymo settings error");
        });
        return xmlHttp.send();
      };
      if (!PaymoFrame.model.tx_id) {
        PaymoFrame.get_trnum(api_key, function(tx_id) {
          PaymoFrame.model.tx_id = tx_id;
          setGood();
        });
        return false;
      }
      return setGood();
    };

    PaymoFrame.open = function(params) {
      var api_key, extra, rebill, setGood, pt_enabled, pt_disabled;
      pt_enabled = params.pt_enabled;
      pt_disabled = params.pt_disabled;

      if (Array.isArray(pt_enabled) && pt_enabled.length) {
        PaymoFrame.model["pt_enabled"] = pt_enabled;
      }

      if (Array.isArray(pt_disabled) && pt_disabled.length) {
        PaymoFrame.model["pt_disabled"] = pt_disabled;
      }

      rebill = params.rebill;
      extra = params.extra;
      PaymoFrame.validator(params, "api_key", "str", true);
      PaymoFrame.validator(params, "tx_id", "str", false);
      PaymoFrame.validator(params, "description", "str", true);
      PaymoFrame.validator(params, "amount", "number", true);
      PaymoFrame.validator(params, "signature", "str", false);
      PaymoFrame.validator(params, "success_redirect", "str", true);
      PaymoFrame.validator(params, "fail_redirect", "str", true);
      PaymoFrame.validator(params, "phone", "str", false);
      PaymoFrame.validator(params, "email", "str", false);
      PaymoFrame.validator(params, "send_post_message", "boolean", false);
      PaymoFrame.validator(params, "authorize_card", "boolean", false);
      PaymoFrame.validator(params, "template", "str", false);
      PaymoFrame.validator(params, "version", "str", false);
      PaymoFrame.model["extra"] = extra;
      PaymoFrame.model["open"] = 1;
      if (typeof rebill === "object") {
        if (rebill["amount"]) {
          PaymoFrame.model["rebill_amount"] = rebill["amount"];
        }
        if (rebill["period"]) {
          PaymoFrame.model["rebill_period"] = rebill["period"];
        }
        if (rebill["end"]) {
          PaymoFrame.model["rebill_end"] = rebill["end"];
        }
      }
      if (params.auto_return) {
        PaymoFrame.model["auto_return"] = params.auto_return;
      }
      api_key = PaymoFrame.model.api_key;

      setGood = function() {
        var xmlHttp;
        xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", HOST + "/paymentgate/iframe/settings/" + api_key, true);
        xmlHttp.responseType = 'json';
        xmlHttp.onload = (function() {
          if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
            PaymoFrame.open_iframe(xmlHttp.response);
            return false;
          }
          return alert("Paymo settings error");
        });
        return xmlHttp.send();
      };

      if (!PaymoFrame.model.tx_id) {
        PaymoFrame.get_trnum(api_key, function(tx_id) {
          PaymoFrame.model.tx_id = tx_id;
          setGood();
        });
        return false;
      }
      return setGood();
    };

    PaymoFrame.open_iframe = function(response) {
      var e, frame_height, frame_width, iframe, iframe_block, iframe_block_style, main_before_block, main_block, main_block_before_style, main_block_cell_style, main_block_style, main_cell_block, parent, query_string, ref, style;
      try {
        response = JSON.parse(response);
      } catch (error) {
        e = error;
      }
      if( Util.ismobile() ) {
          frame_width = 100 + '%';
          frame_height = 100 + '%';
      } else {
          frame_width = response.width + 'px';
          frame_height = (response.height + 'px') || (800 + 'px');
      }
      query_string = PaymoFrame.get_params();
      main_block_style = "position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 1000000; text-align: center; background-color: rgba(128, 128, 128, 0.7);";
      main_block = document.createElement("div");
      Util.addAttr(main_block, "id", "main_block");
      Util.css(main_block, main_block_style);
      main_block.onclick = function(e) {
        var src;
        src = this;
        return Util.remove(src);
      };
      main_block_before_style = "height: 100%; display: inline-block; vertical-align: middle; content: '';";
      main_before_block = document.createElement("div");
      Util.addAttr(main_before_block, "id", "main_before_block");
      Util.css(main_before_block, main_block_before_style);
      Util.append(main_block, main_before_block);
      if( Util.ismobile() ) {
          main_block_cell_style = "-webkit-overflow-scrolling: touch; overflow-y: scroll; width: 95%; height: 95%; display: inline-block; vertical-align: middle; border-radius: 1rem";
      } else {
          main_block_cell_style = "display: inline-block; vertical-align: middle;";
      }
      main_cell_block = document.createElement("div");
      Util.addAttr(main_cell_block, "id", "main_cell_block");
      Util.css(main_cell_block, main_block_cell_style);
      Util.append(main_block, main_cell_block);
      iframe_block_style = "display: inline-block; width: " + frame_width + "; height: " + frame_height + "; border-radius: 1rem; overflow: hidden; box-shadow: 0 1.188rem 2.375rem rgba(0,0,0,.3),0 .938rem .75rem rgba(0,0,0,.22);";
      iframe_block = document.createElement("div");
      Util.addAttr(iframe_block, "id", "iframe_block");
      Util.css(iframe_block, iframe_block_style);
      Util.append(main_cell_block, iframe_block);
      if( Util.ismobile() ) {
          style = "width: 100%; height: 100%; overflow: auto; border: none; border-radius: 1rem;"
      } else {
          style = "border: none; border-radius: 1rem; margin-bottom: 1rem; box-shadow: 0 1.188rem 2.375rem rgba(0,0,0,.3),0 .938rem .75rem rgba(0,0,0,.22);";
      }
      iframe = document.createElement("iframe");
      Util.addAttr(iframe, "id", "paymo_frame");
      Util.addAttr(iframe, "frameborder", 0);
      Util.addAttr(iframe, "scrolling", "yes");
      Util.addAttr(iframe, "src", HOST + "/paymentgate/iframe?" + query_string);
      if( !Util.ismobile() ) {
          Util.addAttr(iframe, "width", frame_width);
          Util.addAttr(iframe, "height", frame_height);
      }
      Util.css(iframe, style);
      Util.append(iframe_block, iframe);
      parent = ref = document.getElementsByTagName("body")[0];
      return Util.append(parent, main_block);
    };

    PaymoFrame.get_trnum = function(api_key, func) {
      var xmlHttp;
      func = typeof func === 'function' ? func : false;
      xmlHttp = new XMLHttpRequest;
      xmlHttp.open("GET", HOST + "/rest/payment/gettrnum/?api_key=" + api_key, true);
      xmlHttp.responseType = 'json';
      xmlHttp.onload = function() {
        var res;
        if (xmlHttp.status === 200) {
          res = xmlHttp.response;
          func(res.transaction || '');
          return false;
        } else {
          alert('Не удалось автоматически сгенерировать номер транзакции(обазательный параметр).');
          return false;
        }
      };
      xmlHttp.send();
    };

    return PaymoFrame;

  })();

  this.PaymoFrame = PaymoFrame;

}).call(this);
